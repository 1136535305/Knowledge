<?xml version="1.0" encoding="utf-8"?>
<android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/root_view"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fitsSystemWindows="true"
    tools:context=".zhihuNewsdetail.ZhihuNewsDetailActivity">

    <android.support.design.widget.AppBarLayout
        android:id="@+id/app_bar"
        android:layout_width="match_parent"
        android:layout_height="280dp"
        android:fitsSystemWindows="true"
        android:theme="@style/AppTheme.AppBarOverlay">


        <!--     CollapsingToolbarLayout的一些属性值介绍：
            ①fitSystemWindows：          true 使AppBarLayout延伸到侵入式状态栏  否则会在状态栏的下方(仅5.0以上适用)
            ②expandedTitleMarginStart：  设置完全扩张的时候（还没有收缩时）title向左填充的距离
            ③contentScrim：              设置当CollapsingToolbar完全折叠后的背景颜色

            ④layout_scrollFlags:                              :  控制包含在其子View响应layout_behavior事件时作出相应的scrollFlags滚动事件（移除屏幕或固定在屏幕顶端）
                                       -  scroll               :  想滚动就必须设置这个。
                                       -  enterAlways          :  实现quick return效果, 当向下移动时，立即显示View（比如Toolbar)。
                                       -  exitUntilCollapsed   :  向上滚动时收缩View，但可以固定Toolbar一直在上面。
                                       -  enterAlwaysCollapsed :  当你的View已经设置minHeight属性又使用此标志时，你的View只能以最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。
                                       -  snap                 :  当一个滚动事件结束，如果视图是部分可见的，那么它将被滚动到收缩或展开。例如，如果视图只有底部25%显示，它将折叠。相反，如果它的底部75%可见，那么它将完全展开。

            ⑤title                       一旦我们用CollapsingToolbarLayout包裹住了Toolbar那么toolbar的标题title必须由CollapsingToolbarLayout设置
        -->


        <android.support.design.widget.CollapsingToolbarLayout
            android:id="@+id/toolbar_layout"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:fitsSystemWindows="true"
            app:contentScrim="?attr/colorPrimary"
            app:expandedTitleMarginStart="32dp"
            app:layout_scrollFlags="scroll|snap|exitUntilCollapsed"
            app:titleEnabled="false"
            app:toolbarId="@+id/toolbar">


            <!--     CollapsingToolbarLayout的子View的一些属性值介绍：

             ①layout_collapseParallaxMultiplier              :  设置视差滚动因子，值为：0~1。
             ②layout_collapseMode                 - parallax :  完全收缩时不显示该View，在内容滚动时，CollapsingToolbarLayout中的View（比如ImageView)也可以同时滚动，实现视差滚动效果，通常和layout_collapseParallaxMultiplier(设置视差因子)搭配使用。
                                                   - pin      ： 当CollapsingToolbarLayout完全收缩后，该View还可以保留在屏幕上。
                                                   - off      :  这个是默认属性，布局将正常显示，没有折叠的行为

            -->

            <ImageView
                android:id="@+id/image_view"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:fitsSystemWindows="true"
                android:scaleType="centerCrop"
                android:src="@drawable/placeholder"
                app:layout_collapseMode="parallax"
                app:layout_collapseParallaxMultiplier="0.7" />


            <!--
                 app:popupTheme，这个属性就是用来自定义我们弹出的菜单的样式，在之前的Actionbar的溢出菜单，我们是不能自定义他的样式的，只能根据你的theme来选择黑白两种，不能自己定义，现在我们可以定义弹出菜单的样式。
            -->
            <android.support.v7.widget.Toolbar
                android:id="@+id/toolbar"
                android:layout_width="match_parent"
                android:layout_height="40dp"
                android:gravity="center_horizontal"
                app:layout_collapseMode="pin"
                app:popupTheme="@style/AppTheme.PopupOverlay"
                app:title="" />

        </android.support.design.widget.CollapsingToolbarLayout>
    </android.support.design.widget.AppBarLayout>

    <include layout="@layout/content_zhihu_news_detail" />

    <!--
      app:layout_anchor与layout_anchorGravity: 锚定了FAB按钮在AppBarLayout的位置
    -->
    <android.support.design.widget.FloatingActionButton
        android:id="@+id/fab"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_margin="@dimen/fab_margin"
        app:layout_anchor="@id/app_bar"
        app:layout_anchorGravity="bottom|end"
        app:srcCompat="@android:drawable/ic_dialog_email" />

</android.support.design.widget.CoordinatorLayout>
